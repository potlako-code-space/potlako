name: Django CI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get install -y libcups2-dev
          python -m pip install --upgrade pip
          pip install -r requirements_production.txt
          pip uninstall pycrypto -y
          pip uninstall pycryptodome -y
          pip install pycryptodome
          pip install flake8
          pip install coverage
          pip install Django==3.1.14
      - name: Flake8 Lint
        run: flake8 ${{ github.workspace }}/potlako
      - name: Create required directories and adjust permissions
        run: |
          sudo mkdir -p /etc/potlako
          sudo chown -R $USER:$USER /etc/potlako
      - name: Create directory for keys
        run: mkdir -p ~/crypto_fields
      - name: Set environment variable for key path
        run: echo "KEY_PATH=${HOME}/crypto_fields" >> $GITHUB_ENV
      - name: Set environment variable for media path
        run: echo "EDC_SYNC_FILES_REMOTE_MEDIA=${{ github.workspace }}/media" >> $GITHUB_ENV
      - name: Run Tests
        run: |
          coverage run manage.py test
        env:
          BASE_API_URL: ${{ secrets.BASE_API_URL }}
          EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          EDC_SYNC_EVALUATION_TIMELINE_API: ${{ secrets.EVALUATION_TIMELINE }}
          EDC_SYNC_NAV_PLAN_API: ${{ secrets.NAV_PLAN_API }}
          EDC_DEVICE_ID: ${{ secrets.EDC_DEVICE_ID }}
          EDC_DEVICE_ROLE: ${{ secrets.EDC_DEVICE_ROLE }}
          EDC_SYNC_SERVER_IP: ${{ secrets.EDC_SYNC_SERVER_IP }}
          EDC_SYNC_FILES_REMOTE_HOST: ${{ secrets.EDC_SYNC_FILES_REMOTE_HOST }}
          EDC_SYNC_FILES_USER: ${{ secrets.EDC_SYNC_FILES_USER }}
          EDC_SYNC_FILES_USB_VOLUME: ${{ secrets.EDC_SYNC_FILES_USB_VOLUME }}
          EDC_SYNC_FILES_REMOTE_MEDIA: ${{ secrets.EDC_SYNC_FILES_REMOTE_MEDIA }}
          MYSQL_HOST: 'localhost'
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DB_NAME: ${{ secrets.MYSQL_DB_NAME }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      - name: Report Coverage
        run: |
          coverage xml
          bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }}

  build_and_push_to_dockerhub:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/potlako_image:${{ github.sha }}
          build-args: |
            BASE_API_URL=${{ secrets.BASE_API_URL }}
            EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}
            EMAIL_HOST=${{ secrets.EMAIL_HOST }}
            EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}
            EMAIL_PORT=${{ secrets.EMAIL_PORT }}
            EMAIL_USER=${{ secrets.EMAIL_USER }}
            EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
            EDC_SYNC_EVALUATION_TIMELINE_API=${{ secrets.EVALUATION_TIMELINE }}
            EDC_SYNC_NAV_PLAN_API=${{ secrets.NAV_PLAN_API }}
            EDC_DEVICE_ID=${{ secrets.EDC_DEVICE_ID }}
            EDC_DEVICE_ROLE=${{ secrets.EDC_DEVICE_ROLE }}
            EDC_SYNC_SERVER_IP=${{ secrets.EDC_SYNC_SERVER_IP }}
            EDC_SYNC_FILES_REMOTE_HOST=${{ secrets.EDC_SYNC_FILES_REMOTE_HOST }}
            EDC_SYNC_FILES_USER=${{ secrets.EDC_SYNC_FILES_USER }}
            EDC_SYNC_FILES_USB_VOLUME=${{ secrets.EDC_SYNC_FILES_USB_VOLUME }}
            EDC_SYNC_FILES_REMOTE_MEDIA=${{ secrets.EDC_SYNC_FILES_REMOTE_MEDIA }}
            MYSQL_HOST=${{ secrets.MYSQL_HOST }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DB_NAME=${{ secrets.MYSQL_DB_NAME }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}

  build_and_push_db_to_dockerhub:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          file: ${{ github.workspace }}/Dockerfile.db
          tags: ${{ secrets.DOCKER_USERNAME }}/potlako_db_image:${{ github.sha }}
          build-args: |
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DB_NAME=${{ secrets.MYSQL_DB_NAME }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}