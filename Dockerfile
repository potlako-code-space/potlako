# Pull the official base image
FROM python:3.9.6-slim-buster

# Set work directory in the Docker image
WORKDIR /app

# Set environment variables in the Docker image
# Prevents Python from writing pyc files to disc (equivalent to python -B option)
ENV PYTHONDONTWRITEBYTECODE 1
# Prevents Python from buffering stdout and stderr (equivalent to python -u option)
ENV PYTHONUNBUFFERED 1

ENV EDC_SMS_BASE_API_URL ${EDC_SMS_BASE_API_URL}
ENV BASE_API_URL ${BASE_API_URL}
ENV EMAIL_BACKEND ${EMAIL_BACKEND}
ENV EMAIL_HOST ${EMAIL_HOST}
ENV EMAIL_USE_TLS ${EMAIL_USE_TLS}
ENV EMAIL_PORT ${EMAIL_PORT}
ENV EMAIL_USER ${EMAIL_USER}
ENV EMAIL_HOST_PASSWORD ${EMAIL_HOST_PASSWORD}
ENV COMMUNITIES_ENHANCED_CARE ${COMMUNITIES_ENHANCED_CARE}
ENV COMMUNITIES_INTERVENTION ${COMMUNITIES_INTERVENTION}
ENV EDC_DEVICE_ROLE ${EDC_DEVICE_ROLE}
ENV EDC_DEVICE_ID ${EDC_DEVICE_ID}
ENV EDC_SYNC_SERVER_IP ${EDC_SYNC_SERVER_IP}
ENV EDC_SYNC_EVALUATION_TIMELINE_API ${EDC_SYNC_EVALUATION_TIMELINE_API}
ENV EDC_SYNC_NAV_PLAN_API ${EDC_SYNC_NAV_PLAN_API}
ENV EDC_SYNC_FILES_SYNC_USER ${EDC_SYNC_FILES_SYNC_USER}
ENV EDC_SYNC_FILES_REMOTE_HOST ${EDC_SYNC_FILES_REMOTE_HOST}
ENV EDC_SYNC_FILES_USB_VOLUME ${EDC_SYNC_FILES_USB_VOLUME}
ENV EDC_SYNC_FILES_REMOTE_MEDIA ${EDC_SYNC_FILES_REMOTE_MEDIA}

# Install dependencies
COPY ./requirements_production.txt .
RUN pip install --upgrade pip && pip install -r requirements_production.txt

# Copy project
COPY . .

# Run the application:
CMD [ "python", "./manage.py", "runserver", "0.0.0.0:8000" ]